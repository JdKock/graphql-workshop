
type Query {
    characters(count: Int!): [Character]
    character(id: Int!): Character
  }

type Character {
    id: String
    name: String
    description: String
    thumbnail: Thumbnail
#    favorite: Boolean
    modified: String
#    comics(first: Int, offset: Int): [Comic]
#    series(first: Int, offset: Int): [Serie]
#    events(first: Int, offset: Int): [Event]
}

type Thumbnail {
    path: String
    extension: String
}

type Comic {
    id: Int
    title: String
    description: String
    favorite: Boolean
}

type Serie {
    available: Int
    collectionURI: String
    items(first: Int, offset: Int): [Item]
    returned: Int
}

type Item {
    resourceURI: String
    name: String
    type: String
}

type Event {
    available: Int
    collectionURI: String
    items(first: Int, offset: Int): [Item]
    returned: Int
}

#type Mutation {
#    updateCharacter(id: Int, input: CharacterInput): [Character]
#    updateComic(id: Int, input: ComicInput): Comic

#    setFavouriteCharacter(id: Int): Character
#    setFavouriteComic(id: Int): Character
#}

input CharacterInput {
    favorite: Boolean!
}

input ComicInput {
    favorite: Boolean!
}